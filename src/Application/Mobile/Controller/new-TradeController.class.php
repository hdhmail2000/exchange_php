<?phpnamespace Mobile\Controller;class TradeController extends MobileController{	protected function _initialize(){		parent::_initialize();		$allow_action=array("index","trade_coin_list","trade_page","market_condition","info","upTrade","chexiao","specialty");		if(!in_array(ACTION_NAME,$allow_action)){			$this->error("非法操作！");		}	}	/*	****币种交易界面	*/	public function trade_page($coin_name = NULL){		// 过滤非法字符----------------S		if (checkstr($coin_name)) {			$this->error('您输入的信息有误！');		}		// 过滤非法字符----------------E		if(empty($coin_name)){			$this -> error('参数错误');		}		// 获取币种列表信息------S		$map['name'] = $coin_name;		$map['status'] = 1;		$coin_info = M('Coin')->where($map)->find();		$coin_info['market'] = $coin_info['name'].'_cny';		$this->assign('coin_info', $coin_info);		$userc = M('UserCoin')->where(array('userid' => userid()))->find();		$this->assign('userc', $userc);		$market_info=M('market')->where(array('name'=>$coin_info['market']))->find();		$this->assign('market_info',$market_info);		$mo = M();		$buy = $mo->query('select price from tw_trade where status=0 and type=1 and market =\'' . $market_info['name'] . '\' order by price desc limit 1;');		$sell = $mo->query('select price from tw_trade where status=0 and type=2 and market =\'' . $market_info['name'] . '\' order by price asc limit 1;');		if(empty($buy[0]['price'])){			$cjmr = M('TradeLog')->where(array('market' => $market_info['name'], 'status' => 1))->order('addtime desc')->find();			$this->assign('buy', number_format($cjmr['price'],$market_info['round']));			$this->assign('market_buy_price',number_format($cjmr['price'],$market_info['round']));		}else{			$this->assign('buy', number_format($buy[0]['price'],$market_info['round']));			$this->assign('market_buy_price',number_format($buy[0]['price'],$market_info['round']));		}		if(empty($sell[0]['price'])){			$cjmc = M('TradeLog')->where(array('market' => $market_info['name'], 'status' => 1))->order('addtime desc')->find();			$this->assign('sell', number_format($cjmc['price'],$market_info['round']));			$this->assign('market_sell_price',number_format($cjmc['price'],$market_info['round']));		}else{			$this->assign('sell', number_format($sell[0]['price'],$market_info['round']));			$this->assign('market_sell_price',number_format($sell[0]['price'],$market_info['round']));		}		$market = $coin_info['market'];		//顶部价格信息		$topdata = (APP_DEBUG ? null : S('getJsonTop' . $market));		if (!$topdata) {			if ($market) {				$xnb = explode('_', $market)[0];				$rmb = explode('_', $market)[1];				foreach (C('market') as $k => $v) {					$v['xnb'] = explode('_', $v['name'])[0];					$v['rmb'] = explode('_', $v['name'])[1];					$topdata['list'][$k]['name'] = $v['name'];					$topdata['list'][$k]['img'] = $v['xnbimg'];					$topdata['list'][$k]['title'] = $v['title'];					$topdata['list'][$k]['new_price'] = $v['new_price'];				}				$topdata['info']['img'] = C('market')[$market]['xnbimg'];				$topdata['info']['title'] = C('market')[$market]['title'];				$topdata['info']['new_price'] = C('market')[$market]['new_price'];				$topdata['info']['max_price'] = C('market')[$market]['max_price'];				$topdata['info']['min_price'] = C('market')[$market]['min_price'];				$topdata['info']['buy_price'] = C('market')[$market]['buy_price'];				$topdata['info']['sell_price'] = C('market')[$market]['sell_price'];				$topdata['info']['volume'] = C('market')[$market]['volume'];				$topdata['info']['change'] = C('market')[$market]['change'];				S('getJsonTop' . $market, $topdata);			}		}		if ($topdata) {			if ($topdata['info']['new_price']) {				$this->assign('market_new_price',$topdata['info']['new_price']);			}			if ($topdata['info']['buy_price']) {				$this->assign('sell_best_price',$topdata['info']['buy_price']);			}			if ($topdata['info']['sell_price']) {				$this->assign('buy_best_price',$topdata['info']['sell_price']);			}			if ($topdata['info']['max_price']) {				$this->assign('market_max_price',$topdata['info']['max_price']);			}			if ($topdata['info']['min_price']) {				$this->assign('market_min_price',$topdata['info']['min_price']);			}			if ($topdata['info']['volume']) {				if ($topdata['info']['volume'] > 10000) {					$topdata['info']['volume'] = (intval($topdata['info']['volume'] / 10000*100)/100) . "万";				}				if ($topdata['info']['volume'] > 100000000) {					$topdata['info']['volume'] = (intval($topdata['info']['volume'] / 100000000*100)/100) . "亿";				}				$this->assign('market_volume',$topdata['info']['volume']);			}			if ($topdata['info']['change']) {				$this->assign('market_change',$topdata['info']['change'] . "%");			}		}		//生成token		$mbuycoin_token = set_token('mbuycoin');		$msellcoin_token = set_token('msellcoin');		$mcancel_token = set_token('mcancel');		$this->assign('mbuycoin_token',$mbuycoin_token);		$this->assign('msellcoin_token',$msellcoin_token);		$this->assign('mcancel_token',$mcancel_token);		$this->display();	}	/*	****币种列表页	*/	public function trade_coin_list(){		// 获取币种列表信息------S		$map = array();		$map['name'] = array('NEQ','cny');		$map['status'] = 1;		$coin_list = M('Coin')->where($map)->order('id desc')->select();		foreach($coin_list as $cname=>$coin){			$market = $coin['name']."_cny";			$market_info = M('market')->where(array('name'=>$market))->find();			$topdata = (APP_DEBUG ? null : S('getJsonTop' . $market));			if (!$topdata) {				if ($market) {					$xnb = explode('_', $market)[0];					$rmb = explode('_', $market)[1];					foreach (C('market') as $k => $v) {						$v['xnb'] = explode('_', $v['name'])[0];						$v['rmb'] = explode('_', $v['name'])[1];						$topdata['list'][$k]['name'] = $v['name'];						$topdata['list'][$k]['img'] = $v['xnbimg'];						$topdata['list'][$k]['title'] = $v['title'];						$topdata['list'][$k]['new_price'] = $v['new_price'];					}					$topdata['info']['img'] = C('market')[$market]['xnbimg'];					$topdata['info']['title'] = C('market')[$market]['title'];					$topdata['info']['new_price'] = number_format(C('market')[$market]['new_price'],$market_info['round']);					$topdata['info']['max_price'] = number_format(C('market')[$market]['max_price'],$market_info['round']);					$topdata['info']['min_price'] = number_format(C('market')[$market]['min_price'],$market_info['round']);					$topdata['info']['buy_price'] = number_format(C('market')[$market]['buy_price'],$market_info['round']);					$topdata['info']['sell_price'] = number_format(C('market')[$market]['sell_price'],$market_info['round']);					$topdata['info']['volume'] = C('market')[$market]['volume'];					$topdata['info']['change'] = C('market')[$market]['change'];					S('getJsonTop' . $market, $topdata);				}			}			if ($topdata) {				if ($topdata['info']['new_price']) {					$coin_list[$cname]['market_new_price'] = $topdata['info']['new_price'];				}				if ($topdata['info']['max_price']) {					$coin_list[$cname]['market_max_price'] = $topdata['info']['max_price'];				}				if ($topdata['info']['min_price']) {					$coin_list[$cname]['market_min_price'] = $topdata['info']['min_price'];				}				if ($topdata['info']['volume']) {					if ($topdata['info']['volume'] > 10000) {						$topdata['info']['volume'] = (intval($topdata['info']['volume'] / 10000*100)/100) . "万";					}					if ($topdata['info']['volume'] > 100000000) {						$topdata['info']['volume'] = (intval($topdata['info']['volume'] / 100000000*100)/100) . "亿";					}					$coin_list[$cname]['market_volume'] = $topdata['info']['volume'];				}				$coin_list[$cname]['market_change'] = $topdata['info']['change'];			}			$cje = M('TradeLog')->where(array('market'=>$market,'status' => 1))->field('sum(mum) as mumsum')->find();			$coin_list[$cname]['cje'] = number_format($cje['mumsum'],$market_info['round']);		}		$this->assign('coin_list', $coin_list);		// 获取币种列表信息------E		$this->display();	}	/*	****币种交易行情界面	*/	public function market_condition($coin_name = null){		if(empty($coin_name)){			$this -> error('参数错误');		}		// 获取币种列表信息------S		$map = array();		$map['name'] = $coin_name;		$map['status'] = 1;		$coin_info = M('Coin')->where($map)->find();		if(!$coin_info){			$this -> error('参数错误');		}		$this->assign('coin_info', $coin_info);		$market_info=M('market')->where(array('name'=>$coin_name."_cny"))->find();		// 获取币种列表信息------E		// 今日最高最低价------S		$now = date('Y-m-d',time());		$now1 = strtotime($now);		$whe['addtime'] = array('egt',$now1);		$li = M('TradeLog')->where($whe)->order('addtime desc')->select();		$pri_arr = array();		foreach ($li as $k => $v) {			$pri_arr[] = $v['price'];		}		$max_pri = max($pri_arr)*1;		$min_pri = min($pri_arr)*1;		$data = array('min_pri'=>number_format($min_pri,$market_info['round']), 'max_pri'=>number_format($max_pri,$market_info['round']));		// 今日最高最低价------E		// 统计历史成交量------S		$counts = M('TradeLog')->select();		$nums = 0;		$mums = 0;		foreach ($counts as $k => $v) {			$nums += $v['num'];			$mums += $v['mum'];		}		$his_nums = floor($nums);		$nums = number_format($nums,8-$market_info['round']);		if ($nums > 10000) {			$nums = (intval($nums / 10000*100)/100) . "万";		}		if ($nums > 100000000) {			$nums = (intval($nums / 100000000*100)/100) . "亿";		}		$data['nums'] = $nums;		$data['mums'] = number_format($mums,4);		// 处理涨停与跌停------E		// 处理昨日收盘价、今日成交量------S		$time = date('Y-m-d',time());		$time2 = strtotime($time);		$time1 = $time2 - 24*60*60;		$where['addtime'] = array('lt',$time2);		// 获取昨日收盘价		$list = M('TradeLog')->where($where)->order('addtime desc')->find();		$price = $list['price']*1;		$li_f = M('TradeLog')->order('addtime desc')->find();		$first_pri = $li_f['price']*1;		$data['price_new'] = number_format($first_pri,$market_info['round']);		// 计算今日最新价与昨日收盘价 差值		$ss = $first_pri - $price;		if($ss > 0){			$data['state'] = 1;			$data['zd'] = ($ss/$price)*100;			$data['zd'] = round($data['zd'] ,1);		}else if($ss < 0){			$data['state'] = 2;			$data['zd'] = ($ss/$price)*100;			$data['zd'] = round($data['zd'] ,1);		}else if($ss == 0){			$data['state'] = 3;			$data['zd'] = 0;		}		// 处理昨日收盘价、今日成交量------E		$this->assign('data', $data);		$this->display();	}	public function index($market = NULL)	{		if (!userid()) {		}		check_server();		if (!$market) {			$market = C('market_mr');		}		// TODO: SEPARATE		// TODO: SEPARATE		$this->assign('market', $market);		$this->assign('xnb', explode('_', $market)[0]);		$this->assign('rmb', explode('_', $market)[1]);		$this->display();	}	public function info($market = NULL)	{		if (!userid()) {		}		check_server();		if (!$market) {			$market = C('market_mr');		}		// TODO: SEPARATE		// TODO: SEPARATE		$this->assign('market', $market);		$this->assign('xnb', explode('_', $market)[0]);		$this->assign('rmb', explode('_', $market)[1]);		$this->display();	}	public function comment($market = NULL)	{		if (!userid()) {		}		check_server();		if (!$market) {			$market = C('market_mr');		}		if (!$market) {			$market = C('market_mr');		}		// TODO: SEPARATE		// TODO: SEPARATE		$this->assign('market', $market);		$this->assign('xnb', explode('_', $market)[0]);		$this->assign('rmb', explode('_', $market)[1]);		$where['coinname'] = explode('_', $market)[0];		$Mobile = M('CoinComment');		$count = $Mobile->where($where)->count();		$Page = new \Think\Page($count, 15);		$show = $Page->show();		$list = $Mobile->where($where)->order('id desc')->limit($Page->firstRow . ',' . $Page->listRows)->select();		foreach ($list as $k => $v) {			$list[$k]['username'] = M('User')->where(array('id' => $v['userid']))->getField('username');		}		$this->assign('list', $list);		$this->assign('page', $show);		$this->display();	}	public function upTrade($paypassword = NULL, $market = NULL, $price, $num, $type, $mtoken)	{		$extra='';		// 过滤非法字符----------------S		if (checkstr($market) || checkstr($price) || checkstr($num) || checkstr($type)) {			$this->error('您输入的信息有误！',$extra);		}		// 过滤非法字符----------------E		if (!userid()) {			$this->error('请先登录！',$extra);		}		if($type==1){			if(!session('mbuycointoken')) {				set_token('mbuycoin');			}			if(!empty($mtoken)){				$res = valid_token('mbuycoin',$mtoken);				if(!$res){					$this->error('请不要频繁提交！',session('mbuycointoken'));				}			}			$extra=session('mbuycointoken');		}		if($type==2){			if(!session('msellcointoken')) {				set_token('msellcoin');			}			if(!empty($mtoken)){				$res = valid_token('msellcoin',$mtoken);				if(!$res){					$this->error('请不要频繁提交！',session('msellcointoken'));				}			}			$extra=session('msellcointoken');		}		// 处理开盘闭盘交易时间===开始		$times = date('G',time());		$minute = date('i',time());		$minute = intval($minute);		if(( $times <= C('market')[$market]['start_time'] && $minute< intval(C('market')[$market]['start_minute']))|| ( $times > C('market')[$market]['stop_time'] && $minute>= intval(C('market')[$market]['stop_minute'] ))){			$this->error('该时间为闭盘时间！',$extra);		}		if(( $times <C('market')[$market]['start_time'] )|| $times > C('market')[$market]['stop_time']){			$this->error('该时间为闭盘时间！',$extra);		}else{			if($times == C('market')[$market]['start_time']){				if( $minute< intval(C('market')[$market]['start_minute'])){					$this->error('该时间为闭盘时间！',$extra);				}			}elseif($times == C('market')[$market]['stop_time']){				if(( $minute > C('market')[$market]['stop_minute'])){					$this->error('该时间为闭盘时间！',$extra);				}			}		}		// 处理周六周日是否可交易===开始		$weeks = date('N',time());		if(!C('market')[$market]['agree6']){			if($weeks == 6){				$this->error('您好，周六为闭盘时间！',$extra);			}		}		if(!C('market')[$market]['agree7']){			if($weeks == 7){				$this->error('您好，周日为闭盘时间！',$extra);			}		}		//处理周六周日是否可交易===结束		if (!check($price, 'double')) {			$this->error('交易价格格式错误',$extra);		}		if (!check($num, 'double')) {			$this->error('交易数量格式错误',$extra);		}		if (($type != 1) && ($type != 2)) {			$this->error('交易类型格式错误',$extra);		}		$user = M('User')->where(array('id' => userid()))->find();		// if ($user['tpwdsetting'] == 3) {		// }		// if ($user['tpwdsetting'] == 2) {		// 	if (md5($paypassword) != $user['paypassword']) {		// 		$this->error('交易密码错误！');		// 	}		// }		// if ($user['tpwdsetting'] == 1) {		// 	if (!session(userid() . 'tpwdsetting')) {		// 		if (md5($paypassword) != $user['paypassword']) {		// 			$this->error('交易密码错误！');		// 		}		// 		else {		// 			session(userid() . 'tpwdsetting', 1);		// 		}		// 	}		// }		if (md5($paypassword) != $user['paypassword']) {			$this->error('交易密码错误！',$extra);		}		if (!C('market')[$market]) {			$this->error('交易市场错误',$extra);		}		else {			$xnb = explode('_', $market)[0];			$rmb = explode('_', $market)[1];		}		if (!C('market')[$market]['trade']) {			$this->error('当前市场禁止交易',$extra);		}		// TODO: SEPARATE		$price = round(floatval($price), C('market')[$market]['round']);		if (!$price) {			$this->error('交易价格错误11' . $price,$extra);		}		$num = round($num, 8 - C('market')[$market]['round']);		if (!check($num, 'double')) {			$this->error('交易数量错误',$extra);		}		if ($type == 1) {			$min_price = (C('market')[$market]['buy_min'] ? C('market')[$market]['buy_min'] : 1.0E-8);			$max_price = (C('market')[$market]['buy_max'] ? C('market')[$market]['buy_max'] : 10000000);		}		else if ($type == 2) {			$min_price = (C('market')[$market]['sell_min'] ? C('market')[$market]['sell_min'] : 1.0E-8);			$max_price = (C('market')[$market]['sell_max'] ? C('market')[$market]['sell_max'] : 10000000);		}		else {			$this->error('交易类型错误',$extra);		}		// if ($max_price < $price) {		// 	$this->error('交易价格超过最大限制！');		// }		// if ($price < $min_price) {		// 	$this->error('交易价格超过最小限制！');		// }		$hou_price = C('market')[$market]['hou_price'];		if ($hou_price) {			if (C('market')[$market]['zhang']) {				// TODO: SEPARATE				$zhang_price = round(($hou_price / 100) * (100 + C('market')[$market]['zhang']), C('market')[$market]['round']);				if ($zhang_price < $price) {					$this->error('交易价格超过今日涨幅限制！',$extra);				}			}			if (C('market')[$market]['die']) {				// TODO: SEPARATE				$die_price = round(($hou_price / 100) * (100 - C('market')[$market]['die']), C('market')[$market]['round']);				if ($price < $die_price) {					$this->error('交易价格超过今日跌幅限制！',$extra);				}			}		}		$user_coin = M('UserCoin')->where(array('userid' => userid()))->find();		if ($type == 1) {			$trade_fee = C('market')[$market]['fee_buy'];			if ($trade_fee) {				$fee = round((($num * $price) / 100) * $trade_fee, 8);				$mum = round((($num * $price) / 100) * (100 + $trade_fee), 8);			}			else {				$fee = 0;				$mum = round($num * $price, 8);			}			if ($user_coin[$rmb] < $mum) {				$this->error(C('coin')[$rmb]['title'] . '余额不足！',$extra);			}		}		else if ($type == 2) {			$trade_fee = C('market')[$market]['fee_sell'];			if ($trade_fee) {				$fee = round((($num * $price) / 100) * $trade_fee, 8);				$mum = round((($num * $price) / 100) * (100 - $trade_fee), 8);			}			else {				$fee = 0;				$mum = round($num * $price, 8);			}			if ($user_coin[$xnb] < $num) {				$this->error(C('coin')[$xnb]['title'] . '余额不足2！',$extra);			}		}		else {			$this->error('交易类型错误',$extra);		}		if (C('coin')[$xnb]['fee_bili']) {			if ($type == 2) {				// TODO: SEPARATE				$bili_user = round($user_coin[$xnb] + $user_coin[$xnb . 'd'], C('market')[$market]['round']);				if ($bili_user) {					// TODO: SEPARATE					$bili_keyi = round(($bili_user / 100) * C('coin')[$xnb]['fee_bili'], C('market')[$market]['round']);					if ($bili_keyi) {						$bili_zheng = M()->query('select id,price,sum(num-deal)as nums from tw_trade where userid=' . userid() . ' and status=0 and type=2 and market =\'' . $market . '\' ;');						if (!$bili_zheng[0]['nums']) {							$bili_zheng[0]['nums'] = 0;						}						$bili_kegua = $bili_keyi - $bili_zheng[0]['nums'];						if ($bili_kegua < 0) {							$bili_kegua = 0;						}						if ($bili_kegua < $num) {							$this->error('您的挂单总数量超过系统限制，您当前持有' . C('coin')[$xnb]['title'] . $bili_user . '个，已经挂单' . $bili_zheng[0]['nums'] . '个，还可以挂单' . $bili_kegua . '个', $extra, 5);						}					}					else {						$this->error('可交易量错误',$extra);					}				}			}		}		if (C('coin')[$xnb]['fee_meitian']) {			if ($type == 2) {				$bili_user = round($user_coin[$xnb] + $user_coin[$xnb . 'd'], 8);				if ($bili_user < 0) {					$this->error('可交易量错误',$extra);				}				$kemai_bili = ($bili_user / 100) * C('coin')[$xnb]['fee_meitian'];				if ($kemai_bili < 0) {					$this->error('您今日只能再卖' . C('coin')[$xnb]['title'] . 0 . '个', $extra, 5);				}				$kaishi_time = mktime(0, 0, 0, date('m'), date('d'), date('Y'));				$jintian_sell = M('Trade')->where(array(					'userid'  => userid(),					'addtime' => array('egt', $kaishi_time),					'type'    => 2,					'status'  => array('neq', 2),					'market'  => array('eq',  $market)					))->sum('num');				if ($jintian_sell) {					$kemai = $kemai_bili - $jintian_sell;				}				else {					$kemai = $kemai_bili;				}				if ($kemai < $num) {					if ($kemai < 0) {						$kemai = 0;					}					$this->error('您的挂单总数量超过系统限制，您今日只能再卖' . C('coin')[$xnb]['title'] . $kemai . '个', $extra, 5);				}			}		}		if (C('market')[$market]['trade_min']) {			if ($mum < C('market')[$market]['trade_min']) {				$this->error('交易总额不能小于' . C('market')[$market]['trade_min'],$extra);			}		}		if (C('market')[$market]['trade_max']) {			if (C('market')[$market]['trade_max'] < $mum) {				$this->error('交易总额不能大于' . C('market')[$market]['trade_max'],$extra);			}		}		if (!$rmb) {			$this->error('数据错误1',$extra);		}		if (!$xnb) {			$this->error('数据错误2',$extra);		}		if (!$market) {			$this->error('数据错误3',$extra);		}		if (!$price) {			$this->error('数据错误4',$extra);		}		if (!$num) {			$this->error('数据错误5',$extra);		}		if (!$mum) {			$this->error('数据错误6',$extra);		}		if (!$type) {			$this->error('数据错误7',$extra);		}		$coin_info = M('Coin')->where(array('name' => C('coin')[$xnb]['name']))->find();		try{			$mo = M();			$mo->execute('set autocommit=0');			$mo->execute('lock tables tw_trade write ,tw_user_coin write ,tw_finance write,tw_finance_log write,tw_user write');			$rs = array();			$user_coin = $mo->table('tw_user_coin')->where(array('userid' => userid()))->find();			if ($type == 1) {				if ($user_coin[$rmb] < $mum) {					throw new \Think\Exception(C('coin')[$rmb]['title'] . '余额不足！');				}				$finance = $mo->table('tw_finance')->where(array('userid' => userid()))->order('id desc')->find();				$finance_num_user_coin = $mo->table('tw_user_coin')->where(array('userid' => userid()))->find();				$rs[] = $mo->table('tw_user_coin')->where(array('userid' => userid()))->setDec($rmb, $mum);				$rs[] = $mo->table('tw_user_coin')->where(array('userid' => userid()))->setInc($rmb . 'd', $mum);				$rs[] = $finance_nameid = $mo->table('tw_trade')->add(array('userid' => userid(), 'market' => $market, 'price' => $price, 'num' => $num, 'mum' => $mum, 'fee' => $fee, 'type' => 1, 'addtime' => time(), 'status' => 0));				$finance_mum_user_coin = $mo->table('tw_user_coin')->where(array('userid' => userid()))->find();				$finance_hash = md5(userid() . $finance_num_user_coin['cny'] . $finance_num_user_coin['cnyd'] . $mum .$finance_mum_user_coin['cny'] . $finance_mum_user_coin['cnyd'] . MSCODE . 'tp3.net.cn');				$finance_num = $finance_num_user_coin['cny'] + $finance_num_user_coin['cnyd'];				// 处理资金变更日志-----------------S				$user_n_info = $mo->table('tw_user')->where(array('id' => userid()))->find();				$rs[] = $mo->table('tw_finance_log')->add(array('username' => $user_n_info['username'], 'adminname' => $user_n_info['username'], 'addtime' => time(), 'plusminus' => 0, 'amount' => $mum, 'optype' => 18, 'cointype' => 1, 'old_amount' => $finance_num_user_coin[$rmb], 'new_amount' => $finance_mum_user_coin[$rmb], 'userid' => userid(), 'adminid' => userid(),'addip'=>get_client_ip(),'position'=>1));				$rs[] = $mo->table('tw_finance_log')->add(array('username' => $user_n_info['username'], 'adminname' => $user_n_info['username'], 'addtime' => time(), 'plusminus' => 1, 'amount' => $mum, 'optype' => 20, 'cointype' => 1, 'old_amount' => $finance_num_user_coin[$rmb. 'd'], 'new_amount' => $finance_mum_user_coin[$rmb. 'd'], 'userid' => userid(), 'adminid' => userid(),'addip'=>get_client_ip(),'position'=>1));				// 处理资金变更日志-----------------E				if ($finance['mum'] < $finance_num) {					$finance_status = (1 < ($finance_num - $finance['mum']) ? 0 : 1);				}				else {					$finance_status = (1 < ($finance['mum'] - $finance_num) ? 0 : 1);				}				$rs[] = $mo->table('tw_finance')->add(array('userid' => userid(), 'coinname' => 'cny', 'num_a' => $finance_num_user_coin['cny'], 'num_b' => $finance_num_user_coin['cnyd'], 'num' => $finance_num_user_coin['cny'] + $finance_num_user_coin['cnyd'], 'fee' => $mum, 'type' => 2, 'name' => 'trade', 'nameid' => $finance_nameid, 'remark' => '交易中心-委托买入-市场' . $market, 'mum_a' => $finance_mum_user_coin['cny'], 'mum_b' => $finance_mum_user_coin['cnyd'], 'mum' => $finance_mum_user_coin['cny'] + $finance_mum_user_coin['cnyd'], 'move' => $finance_hash, 'addtime' => time(), 'status' => $finance_status));			}			else if ($type == 2) {				if ($user_coin[$xnb] < $num) {					throw new \Think\Exception(C('coin')[$xnb]['title'] . '余额不足2！');				}				$fin_user_coin = $mo->table('tw_user_coin')->where(array('userid' => userid()))->find();//处理资金变更日志				$rs[] = $mo->table('tw_user_coin')->where(array('userid' => userid()))->setDec($xnb, $num);				$rs[] = $mo->table('tw_user_coin')->where(array('userid' => userid()))->setInc($xnb . 'd', $num);				$rs[] = $mo->table('tw_trade')->add(array('userid' => userid(), 'market' => $market, 'price' => $price, 'num' => $num, 'mum' => $mum, 'fee' => $fee, 'type' => 2, 'addtime' => time(), 'status' => 0));				$fin_user_coin_new = $mo->table('tw_user_coin')->where(array('userid' => userid()))->find();//处理资金变更日志				$user_n_info = $mo->table('tw_user')->where(array('id' => userid()))->find();				$rs[] = $mo->table('tw_finance_log')->add(array('username' => $user_n_info['username'], 'adminname' => $user_n_info['username'], 'addtime' => time(), 'plusminus' => 0, 'amount' => $num, 'optype' => 19, 'cointype' => $coin_info['id'], 'old_amount' => $fin_user_coin[$xnb], 'new_amount' => $fin_user_coin_new[$xnb], 'userid' => userid(), 'adminid' => userid(),'addip'=>get_client_ip(),'position'=>1));				$rs[] = $mo->table('tw_finance_log')->add(array('username' => $user_n_info['username'], 'adminname' => $user_n_info['username'], 'addtime' => time(), 'plusminus' => 1, 'amount' => $num, 'optype' => 21, 'cointype' => $coin_info['id'], 'old_amount' => $fin_user_coin[$xnb. 'd'], 'new_amount' => $fin_user_coin_new[$xnb. 'd'], 'userid' => userid(), 'adminid' => userid(),'addip'=>get_client_ip(),'position'=>1));				// 处理资金变更日志-----------------E			}			else {				throw new \Think\Exception('交易类型错误');			}			if (check_arr($rs)) {				$mo->execute('commit');				$mo->execute('unlock tables');			}			else {				throw new \Think\Exception('交易失败！');			}		}catch(\Think\Exception $e){			$mo->execute('rollback');			$mo->execute('unlock tables');			$this->error('交易失败！',$extra);		}		S('getDepth', null);		$this->success('交易成功！',$extra);	}	public function chexiao($id, $mtoken)	{		$extra = '';		// 过滤非法字符----------------S		if (checkstr($id)) {			$this->error('您输入的信息有误！',$extra);		}		// 过滤非法字符----------------E		if (!userid()) {			$this->error('请先登录！',$extra);		}		if(!session('mcanceltoken')) {			set_token('mcancel');		}		if(!empty($mtoken)){			$res = valid_token('mcancel',$mtoken);			if(!$res){				$this->error('请不要频繁提交！',session('mcanceltoken'));			}			$extra=session('mcanceltoken');		}		if (!check($id, 'd')) {			$this->error('请选择要撤销的委托！',$extra);		}		$trade = M('Trade')->where(array('id' => $id))->find();		if (!$trade) {			$this->error('撤销委托参数错误！',$extra);		}		if ($trade['userid'] != userid()) {			$this->error('参数非法！',$extra);		}		if ($trade['status'] != 0) {			$this->error('此订单不能撤销！',$extra);		}		if($trade['deal'] != 0){			$this->error('此订单不能撤销！',$extra);		}		$result = D('Trade')->chexiao($id);		if(!empty($result[0])){			$this->success($result[1],$extra);		}else{			$this->error($result[1],$extra);		}	}	public function specialty($coin_name = NULL){		// 过滤非法字符----------------S		if (checkstr($coin_name)) {			$this->error('您输入的信息有误！');		}		// 过滤非法字符----------------E		if (!$coin_name) {			$coin_name = C('market_mr');		}		// 获取币种列表信息------S		$map = array();		$map['name'] = $coin_name;		$map['status'] = 1;		$coin_info = M('Coin')->where($map)->find();		if(!$coin_info){			$this -> error('参数错误');		}		$this->assign('coin_info', $coin_info);		// 获取币种列表信息------E		$coin_name = $coin_name.'_cny';		$this->assign('market', $coin_name);		$this->display();	}}?>